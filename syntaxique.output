Grammar

    0 $accept: programme $end

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    2 instruction: affectation
    3            | inOut
    4            | condition
    5            | boucle

    6 op_cmp: inf_egal
    7       | sup_egal
    8       | inf
    9       | sup
   10       | egal
   11       | not_egal

   12 instructions: instruction pvg
   13             | instructions instruction pvg

   14 expression: IDF op_cmp constante
   15           | IDF op_cmp IDF
   16           | expression AND expression
   17           | expression OR expression
   18           | NOT expression
   19           | expression add expression
   20           | expression sous expression
   21           | expression mult expression
   22           | expression division expression

   23 type: Int
   24     | Float

   25 declaration: let liste_idf separ_dec type pvg
   26            | let liste_idf separ_dec crochet_ouv type pvg constante crochet_fer pvg

   27 liste_idf: IDF
   28          | liste_idf vg IDF

   29 const_declaration: define Const IDF separ_dec type constante pvg

   30 declarations: declaration
   31             | const_declaration
   32             | declarations declaration
   33             | declarations const_declaration

   34 inOut: input_var par_ouv IDF par_fer pvg
   35      | output_var par_ouv chaine par_fer pvg

   36 affectation: IDF aff constante pvg
   37            | IDF aff_const constante pvg
   38            | IDF aff_const Float pvg
   39            | IDF aff_const chaine pvg

   40 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer
   41          | IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

   42 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg
   43       | FOR IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer


Terminals, with rules where they appear

$end (0) 0
error (256)
MainPrgm (258) 1
Var (259) 1
BeginPg (260) 1
EndPg (261) 1
input_var (262) 34
output_var (263) 35
Const (264) 29
IDF (265) 1 14 15 27 28 29 34 36 37 38 39 43
let (266) 25 26
define (267) 29
chaine (268) 35 39
Int (269) 23
constante (270) 14 26 29 36 37 43
Float (271) 24 38
IF (272) 40 41
THEN (273) 40 41
ELSE (274) 41
DO (275) 42
WHILE (276) 42
FOR (277) 43
FROM (278) 43
TO (279) 43
STEP (280) 43
OR (281) 17
AND (282) 16
NOT (283) 18
aff (284) 36
aff_const (285) 37 38 39
pvg (286) 1 12 13 25 26 29 34 35 36 37 38 39 42
vg (287) 28
separ_dec (288) 25 26 29
add (289) 19
sous (290) 20
mult (291) 21
division (292) 22
inf_egal (293) 6
sup_egal (294) 7
inf (295) 8
sup (296) 9
egal (297) 10
not_egal (298) 11
acc_ouv (299) 1 40 41 42 43
acc_fer (300) 1 40 41 42 43
par_ouv (301) 34 35 40 41 42
par_fer (302) 34 35 40 41 42
crochet_ouv (303) 26
crochet_fer (304) 26


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
programme (51)
    on left: 1, on right: 0
instruction (52)
    on left: 2 3 4 5, on right: 12 13
op_cmp (53)
    on left: 6 7 8 9 10 11, on right: 14 15
instructions (54)
    on left: 12 13, on right: 1 13 40 41 42 43
expression (55)
    on left: 14 15 16 17 18 19 20 21 22, on right: 16 17 18 19 20 21
    22 40 41 42
type (56)
    on left: 23 24, on right: 25 26 29
declaration (57)
    on left: 25 26, on right: 30 32
liste_idf (58)
    on left: 27 28, on right: 25 26 28
const_declaration (59)
    on left: 29, on right: 31 33
declarations (60)
    on left: 30 31 32 33, on right: 1 32 33
inOut (61)
    on left: 34 35, on right: 3
affectation (62)
    on left: 36 37 38 39, on right: 2
condition (63)
    on left: 40 41, on right: 4
boucle (64)
    on left: 42 43, on right: 5


state 0

    0 $accept: . programme $end

    MainPrgm  shift, and go to state 1

    programme  go to state 2


state 1

    1 programme: MainPrgm . IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    IDF  shift, and go to state 3


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 4


state 3

    1 programme: MainPrgm IDF . pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    pvg  shift, and go to state 5


state 4

    0 $accept: programme $end .

    $default  accept


state 5

    1 programme: MainPrgm IDF pvg . Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    Var  shift, and go to state 6


state 6

    1 programme: MainPrgm IDF pvg Var . declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    let     shift, and go to state 7
    define  shift, and go to state 8

    declaration        go to state 9
    const_declaration  go to state 10
    declarations       go to state 11


state 7

   25 declaration: let . liste_idf separ_dec type pvg
   26            | let . liste_idf separ_dec crochet_ouv type pvg constante crochet_fer pvg

    IDF  shift, and go to state 12

    liste_idf  go to state 13


state 8

   29 const_declaration: define . Const IDF separ_dec type constante pvg

    Const  shift, and go to state 14


state 9

   30 declarations: declaration .

    $default  reduce using rule 30 (declarations)


state 10

   31 declarations: const_declaration .

    $default  reduce using rule 31 (declarations)


state 11

    1 programme: MainPrgm IDF pvg Var declarations . BeginPg acc_ouv instructions acc_fer EndPg pvg
   32 declarations: declarations . declaration
   33             | declarations . const_declaration

    BeginPg  shift, and go to state 15
    let      shift, and go to state 7
    define   shift, and go to state 8

    declaration        go to state 16
    const_declaration  go to state 17


state 12

   27 liste_idf: IDF .

    $default  reduce using rule 27 (liste_idf)


state 13

   25 declaration: let liste_idf . separ_dec type pvg
   26            | let liste_idf . separ_dec crochet_ouv type pvg constante crochet_fer pvg
   28 liste_idf: liste_idf . vg IDF

    vg         shift, and go to state 18
    separ_dec  shift, and go to state 19


state 14

   29 const_declaration: define Const . IDF separ_dec type constante pvg

    IDF  shift, and go to state 20


state 15

    1 programme: MainPrgm IDF pvg Var declarations BeginPg . acc_ouv instructions acc_fer EndPg pvg

    acc_ouv  shift, and go to state 21


state 16

   32 declarations: declarations declaration .

    $default  reduce using rule 32 (declarations)


state 17

   33 declarations: declarations const_declaration .

    $default  reduce using rule 33 (declarations)


state 18

   28 liste_idf: liste_idf vg . IDF

    IDF  shift, and go to state 22


state 19

   25 declaration: let liste_idf separ_dec . type pvg
   26            | let liste_idf separ_dec . crochet_ouv type pvg constante crochet_fer pvg

    Int          shift, and go to state 23
    Float        shift, and go to state 24
    crochet_ouv  shift, and go to state 25

    type  go to state 26


state 20

   29 const_declaration: define Const IDF . separ_dec type constante pvg

    separ_dec  shift, and go to state 27


state 21

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv . instructions acc_fer EndPg pvg

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33

    instruction   go to state 34
    instructions  go to state 35
    inOut         go to state 36
    affectation   go to state 37
    condition     go to state 38
    boucle        go to state 39


state 22

   28 liste_idf: liste_idf vg IDF .

    $default  reduce using rule 28 (liste_idf)


state 23

   23 type: Int .

    $default  reduce using rule 23 (type)


state 24

   24 type: Float .

    $default  reduce using rule 24 (type)


state 25

   26 declaration: let liste_idf separ_dec crochet_ouv . type pvg constante crochet_fer pvg

    Int    shift, and go to state 23
    Float  shift, and go to state 24

    type  go to state 40


state 26

   25 declaration: let liste_idf separ_dec type . pvg

    pvg  shift, and go to state 41


state 27

   29 const_declaration: define Const IDF separ_dec . type constante pvg

    Int    shift, and go to state 23
    Float  shift, and go to state 24

    type  go to state 42


state 28

   34 inOut: input_var . par_ouv IDF par_fer pvg

    par_ouv  shift, and go to state 43


state 29

   35 inOut: output_var . par_ouv chaine par_fer pvg

    par_ouv  shift, and go to state 44


state 30

   36 affectation: IDF . aff constante pvg
   37            | IDF . aff_const constante pvg
   38            | IDF . aff_const Float pvg
   39            | IDF . aff_const chaine pvg

    aff        shift, and go to state 45
    aff_const  shift, and go to state 46


state 31

   40 condition: IF . par_ouv expression par_fer THEN acc_ouv instructions acc_fer
   41          | IF . par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    par_ouv  shift, and go to state 47


state 32

   42 boucle: DO . acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg

    acc_ouv  shift, and go to state 48


state 33

   43 boucle: FOR . IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer

    IDF  shift, and go to state 49


state 34

   12 instructions: instruction . pvg

    pvg  shift, and go to state 50


state 35

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions . acc_fer EndPg pvg
   13 instructions: instructions . instruction pvg

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33
    acc_fer     shift, and go to state 51

    instruction  go to state 52
    inOut        go to state 36
    affectation  go to state 37
    condition    go to state 38
    boucle       go to state 39


state 36

    3 instruction: inOut .

    $default  reduce using rule 3 (instruction)


state 37

    2 instruction: affectation .

    $default  reduce using rule 2 (instruction)


state 38

    4 instruction: condition .

    $default  reduce using rule 4 (instruction)


state 39

    5 instruction: boucle .

    $default  reduce using rule 5 (instruction)


state 40

   26 declaration: let liste_idf separ_dec crochet_ouv type . pvg constante crochet_fer pvg

    pvg  shift, and go to state 53


state 41

   25 declaration: let liste_idf separ_dec type pvg .

    $default  reduce using rule 25 (declaration)


state 42

   29 const_declaration: define Const IDF separ_dec type . constante pvg

    constante  shift, and go to state 54


state 43

   34 inOut: input_var par_ouv . IDF par_fer pvg

    IDF  shift, and go to state 55


state 44

   35 inOut: output_var par_ouv . chaine par_fer pvg

    chaine  shift, and go to state 56


state 45

   36 affectation: IDF aff . constante pvg

    constante  shift, and go to state 57


state 46

   37 affectation: IDF aff_const . constante pvg
   38            | IDF aff_const . Float pvg
   39            | IDF aff_const . chaine pvg

    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    Float      shift, and go to state 60


state 47

   40 condition: IF par_ouv . expression par_fer THEN acc_ouv instructions acc_fer
   41          | IF par_ouv . expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 63


state 48

   42 boucle: DO acc_ouv . instructions acc_fer WHILE par_ouv expression par_fer pvg

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33

    instruction   go to state 34
    instructions  go to state 64
    inOut         go to state 36
    affectation   go to state 37
    condition     go to state 38
    boucle        go to state 39


state 49

   43 boucle: FOR IDF . FROM constante TO constante STEP constante acc_ouv instructions acc_fer

    FROM  shift, and go to state 65


state 50

   12 instructions: instruction pvg .

    $default  reduce using rule 12 (instructions)


state 51

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer . EndPg pvg

    EndPg  shift, and go to state 66


state 52

   13 instructions: instructions instruction . pvg

    pvg  shift, and go to state 67


state 53

   26 declaration: let liste_idf separ_dec crochet_ouv type pvg . constante crochet_fer pvg

    constante  shift, and go to state 68


state 54

   29 const_declaration: define Const IDF separ_dec type constante . pvg

    pvg  shift, and go to state 69


state 55

   34 inOut: input_var par_ouv IDF . par_fer pvg

    par_fer  shift, and go to state 70


state 56

   35 inOut: output_var par_ouv chaine . par_fer pvg

    par_fer  shift, and go to state 71


state 57

   36 affectation: IDF aff constante . pvg

    pvg  shift, and go to state 72


state 58

   39 affectation: IDF aff_const chaine . pvg

    pvg  shift, and go to state 73


state 59

   37 affectation: IDF aff_const constante . pvg

    pvg  shift, and go to state 74


state 60

   38 affectation: IDF aff_const Float . pvg

    pvg  shift, and go to state 75


state 61

   14 expression: IDF . op_cmp constante
   15           | IDF . op_cmp IDF

    inf_egal  shift, and go to state 76
    sup_egal  shift, and go to state 77
    inf       shift, and go to state 78
    sup       shift, and go to state 79
    egal      shift, and go to state 80
    not_egal  shift, and go to state 81

    op_cmp  go to state 82


state 62

   18 expression: NOT . expression

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 83


state 63

   16 expression: expression . AND expression
   17           | expression . OR expression
   19           | expression . add expression
   20           | expression . sous expression
   21           | expression . mult expression
   22           | expression . division expression
   40 condition: IF par_ouv expression . par_fer THEN acc_ouv instructions acc_fer
   41          | IF par_ouv expression . par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    OR        shift, and go to state 84
    AND       shift, and go to state 85
    add       shift, and go to state 86
    sous      shift, and go to state 87
    mult      shift, and go to state 88
    division  shift, and go to state 89
    par_fer   shift, and go to state 90


state 64

   13 instructions: instructions . instruction pvg
   42 boucle: DO acc_ouv instructions . acc_fer WHILE par_ouv expression par_fer pvg

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33
    acc_fer     shift, and go to state 91

    instruction  go to state 52
    inOut        go to state 36
    affectation  go to state 37
    condition    go to state 38
    boucle       go to state 39


state 65

   43 boucle: FOR IDF FROM . constante TO constante STEP constante acc_ouv instructions acc_fer

    constante  shift, and go to state 92


state 66

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg . pvg

    pvg  shift, and go to state 93


state 67

   13 instructions: instructions instruction pvg .

    $default  reduce using rule 13 (instructions)


state 68

   26 declaration: let liste_idf separ_dec crochet_ouv type pvg constante . crochet_fer pvg

    crochet_fer  shift, and go to state 94


state 69

   29 const_declaration: define Const IDF separ_dec type constante pvg .

    $default  reduce using rule 29 (const_declaration)


state 70

   34 inOut: input_var par_ouv IDF par_fer . pvg

    pvg  shift, and go to state 95


state 71

   35 inOut: output_var par_ouv chaine par_fer . pvg

    pvg  shift, and go to state 96


state 72

   36 affectation: IDF aff constante pvg .

    $default  reduce using rule 36 (affectation)


state 73

   39 affectation: IDF aff_const chaine pvg .

    $default  reduce using rule 39 (affectation)


state 74

   37 affectation: IDF aff_const constante pvg .

    $default  reduce using rule 37 (affectation)


state 75

   38 affectation: IDF aff_const Float pvg .

    $default  reduce using rule 38 (affectation)


state 76

    6 op_cmp: inf_egal .

    $default  reduce using rule 6 (op_cmp)


state 77

    7 op_cmp: sup_egal .

    $default  reduce using rule 7 (op_cmp)


state 78

    8 op_cmp: inf .

    $default  reduce using rule 8 (op_cmp)


state 79

    9 op_cmp: sup .

    $default  reduce using rule 9 (op_cmp)


state 80

   10 op_cmp: egal .

    $default  reduce using rule 10 (op_cmp)


state 81

   11 op_cmp: not_egal .

    $default  reduce using rule 11 (op_cmp)


state 82

   14 expression: IDF op_cmp . constante
   15           | IDF op_cmp . IDF

    IDF        shift, and go to state 97
    constante  shift, and go to state 98


state 83

   16 expression: expression . AND expression
   17           | expression . OR expression
   18           | NOT expression .
   19           | expression . add expression
   20           | expression . sous expression
   21           | expression . mult expression
   22           | expression . division expression

    add       shift, and go to state 86
    sous      shift, and go to state 87
    mult      shift, and go to state 88
    division  shift, and go to state 89

    $default  reduce using rule 18 (expression)


state 84

   17 expression: expression OR . expression

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 99


state 85

   16 expression: expression AND . expression

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 100


state 86

   19 expression: expression add . expression

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 101


state 87

   20 expression: expression sous . expression

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 102


state 88

   21 expression: expression mult . expression

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 103


state 89

   22 expression: expression division . expression

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 104


state 90

   40 condition: IF par_ouv expression par_fer . THEN acc_ouv instructions acc_fer
   41          | IF par_ouv expression par_fer . THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    THEN  shift, and go to state 105


state 91

   42 boucle: DO acc_ouv instructions acc_fer . WHILE par_ouv expression par_fer pvg

    WHILE  shift, and go to state 106


state 92

   43 boucle: FOR IDF FROM constante . TO constante STEP constante acc_ouv instructions acc_fer

    TO  shift, and go to state 107


state 93

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg .

    $default  reduce using rule 1 (programme)


state 94

   26 declaration: let liste_idf separ_dec crochet_ouv type pvg constante crochet_fer . pvg

    pvg  shift, and go to state 108


state 95

   34 inOut: input_var par_ouv IDF par_fer pvg .

    $default  reduce using rule 34 (inOut)


state 96

   35 inOut: output_var par_ouv chaine par_fer pvg .

    $default  reduce using rule 35 (inOut)


state 97

   15 expression: IDF op_cmp IDF .

    $default  reduce using rule 15 (expression)


state 98

   14 expression: IDF op_cmp constante .

    $default  reduce using rule 14 (expression)


state 99

   16 expression: expression . AND expression
   17           | expression . OR expression
   17           | expression OR expression .
   19           | expression . add expression
   20           | expression . sous expression
   21           | expression . mult expression
   22           | expression . division expression

    AND       shift, and go to state 85
    add       shift, and go to state 86
    sous      shift, and go to state 87
    mult      shift, and go to state 88
    division  shift, and go to state 89

    $default  reduce using rule 17 (expression)


state 100

   16 expression: expression . AND expression
   16           | expression AND expression .
   17           | expression . OR expression
   19           | expression . add expression
   20           | expression . sous expression
   21           | expression . mult expression
   22           | expression . division expression

    add       shift, and go to state 86
    sous      shift, and go to state 87
    mult      shift, and go to state 88
    division  shift, and go to state 89

    $default  reduce using rule 16 (expression)


state 101

   16 expression: expression . AND expression
   17           | expression . OR expression
   19           | expression . add expression
   19           | expression add expression .
   20           | expression . sous expression
   21           | expression . mult expression
   22           | expression . division expression

    mult      shift, and go to state 88
    division  shift, and go to state 89

    $default  reduce using rule 19 (expression)


state 102

   16 expression: expression . AND expression
   17           | expression . OR expression
   19           | expression . add expression
   20           | expression . sous expression
   20           | expression sous expression .
   21           | expression . mult expression
   22           | expression . division expression

    mult      shift, and go to state 88
    division  shift, and go to state 89

    $default  reduce using rule 20 (expression)


state 103

   16 expression: expression . AND expression
   17           | expression . OR expression
   19           | expression . add expression
   20           | expression . sous expression
   21           | expression . mult expression
   21           | expression mult expression .
   22           | expression . division expression

    $default  reduce using rule 21 (expression)


state 104

   16 expression: expression . AND expression
   17           | expression . OR expression
   19           | expression . add expression
   20           | expression . sous expression
   21           | expression . mult expression
   22           | expression . division expression
   22           | expression division expression .

    $default  reduce using rule 22 (expression)


state 105

   40 condition: IF par_ouv expression par_fer THEN . acc_ouv instructions acc_fer
   41          | IF par_ouv expression par_fer THEN . acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 109


state 106

   42 boucle: DO acc_ouv instructions acc_fer WHILE . par_ouv expression par_fer pvg

    par_ouv  shift, and go to state 110


state 107

   43 boucle: FOR IDF FROM constante TO . constante STEP constante acc_ouv instructions acc_fer

    constante  shift, and go to state 111


state 108

   26 declaration: let liste_idf separ_dec crochet_ouv type pvg constante crochet_fer pvg .

    $default  reduce using rule 26 (declaration)


state 109

   40 condition: IF par_ouv expression par_fer THEN acc_ouv . instructions acc_fer
   41          | IF par_ouv expression par_fer THEN acc_ouv . instructions acc_fer ELSE acc_ouv instructions acc_fer

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33

    instruction   go to state 34
    instructions  go to state 112
    inOut         go to state 36
    affectation   go to state 37
    condition     go to state 38
    boucle        go to state 39


state 110

   42 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv . expression par_fer pvg

    IDF  shift, and go to state 61
    NOT  shift, and go to state 62

    expression  go to state 113


state 111

   43 boucle: FOR IDF FROM constante TO constante . STEP constante acc_ouv instructions acc_fer

    STEP  shift, and go to state 114


state 112

   13 instructions: instructions . instruction pvg
   40 condition: IF par_ouv expression par_fer THEN acc_ouv instructions . acc_fer
   41          | IF par_ouv expression par_fer THEN acc_ouv instructions . acc_fer ELSE acc_ouv instructions acc_fer

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33
    acc_fer     shift, and go to state 115

    instruction  go to state 52
    inOut        go to state 36
    affectation  go to state 37
    condition    go to state 38
    boucle       go to state 39


state 113

   16 expression: expression . AND expression
   17           | expression . OR expression
   19           | expression . add expression
   20           | expression . sous expression
   21           | expression . mult expression
   22           | expression . division expression
   42 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression . par_fer pvg

    OR        shift, and go to state 84
    AND       shift, and go to state 85
    add       shift, and go to state 86
    sous      shift, and go to state 87
    mult      shift, and go to state 88
    division  shift, and go to state 89
    par_fer   shift, and go to state 116


state 114

   43 boucle: FOR IDF FROM constante TO constante STEP . constante acc_ouv instructions acc_fer

    constante  shift, and go to state 117


state 115

   40 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer .
   41          | IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer . ELSE acc_ouv instructions acc_fer

    ELSE  shift, and go to state 118

    $default  reduce using rule 40 (condition)


state 116

   42 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer . pvg

    pvg  shift, and go to state 119


state 117

   43 boucle: FOR IDF FROM constante TO constante STEP constante . acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 120


state 118

   41 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE . acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 121


state 119

   42 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg .

    $default  reduce using rule 42 (boucle)


state 120

   43 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv . instructions acc_fer

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33

    instruction   go to state 34
    instructions  go to state 122
    inOut         go to state 36
    affectation   go to state 37
    condition     go to state 38
    boucle        go to state 39


state 121

   41 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv . instructions acc_fer

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33

    instruction   go to state 34
    instructions  go to state 123
    inOut         go to state 36
    affectation   go to state 37
    condition     go to state 38
    boucle        go to state 39


state 122

   13 instructions: instructions . instruction pvg
   43 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv instructions . acc_fer

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33
    acc_fer     shift, and go to state 124

    instruction  go to state 52
    inOut        go to state 36
    affectation  go to state 37
    condition    go to state 38
    boucle       go to state 39


state 123

   13 instructions: instructions . instruction pvg
   41 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions . acc_fer

    input_var   shift, and go to state 28
    output_var  shift, and go to state 29
    IDF         shift, and go to state 30
    IF          shift, and go to state 31
    DO          shift, and go to state 32
    FOR         shift, and go to state 33
    acc_fer     shift, and go to state 125

    instruction  go to state 52
    inOut        go to state 36
    affectation  go to state 37
    condition    go to state 38
    boucle       go to state 39


state 124

   43 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer .

    $default  reduce using rule 43 (boucle)


state 125

   41 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer .

    $default  reduce using rule 41 (condition)
