Terminals unused in grammar

   inf_egal
   sup_egal
   inf
   sup
   egal
   not_egal


Grammar

    0 $accept: programme $end

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    2 instruction: affectation
    3            | inOut
    4            | condition
    5            | boucle

    6 instructions: instruction
    7             | instructions instruction

    8 expression: IDF
    9           | constante
   10           | reel
   11           | chaine
   12           | IDF crochet_ouv expression crochet_fer
   13           | par_ouv expression AND expression par_fer
   14           | par_ouv expression OR expression par_fer
   15           | NOT par_ouv expression par_fer
   16           | expression add expression
   17           | expression sous expression
   18           | expression mult expression
   19           | expression division expression
   20           | par_ouv expression par_fer

   21 type: Int
   22     | reel

   23 declaration: let liste_idf separ_dec type pvg
   24            | let liste_idf separ_dec declaration_tableau

   25 declaration_tableau: crochet_ouv type pvg constante crochet_fer pvg

   26 liste_idf: IDF
   27          | liste_idf vg IDF

   28 const_declaration: at_sign define Const IDF separ_dec type affect_val constante pvg

   29 declarations: /* empty */
   30             | declaration declarations
   31             | const_declaration declarations

   32 inOut: input_var par_ouv IDF par_fer pvg
   33      | output_var par_ouv chaine par_fer pvg

   34 affectation: IDF aff expression pvg
   35            | IDF crochet_ouv expression crochet_fer aff expression pvg

   36 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer
   37          | IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

   38 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg
   39       | FOR IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer


Terminals, with rules where they appear

$end (0) 0
error (256)
MainPrgm (258) 1
Var (259) 1
BeginPg (260) 1
EndPg (261) 1
input_var (262) 32
output_var (263) 33
Const (264) 28
IDF (265) 1 8 12 26 27 28 32 34 35 39
let (266) 23 24
define (267) 28
at_sign (268) 28
chaine (269) 11 33
Int (270) 21
constante (271) 9 25 28 39
reel (272) 10 22
IF (273) 36 37
THEN (274) 36 37
ELSE (275) 37
DO (276) 38
WHILE (277) 38
FOR (278) 39
FROM (279) 39
TO (280) 39
STEP (281) 39
OR (282) 14
AND (283) 13
NOT (284) 15
aff (285) 34 35
affect_val (286) 28
pvg (287) 1 23 25 28 32 33 34 35 38
vg (288) 27
separ_dec (289) 23 24 28
add (290) 16
sous (291) 17
mult (292) 18
division (293) 19
inf_egal (294)
sup_egal (295)
inf (296)
sup (297)
egal (298)
not_egal (299)
acc_ouv (300) 1 36 37 38 39
acc_fer (301) 1 36 37 38 39
par_ouv (302) 13 14 15 20 32 33 36 37 38
par_fer (303) 13 14 15 20 32 33 36 37 38
crochet_ouv (304) 12 25 35
crochet_fer (305) 12 25 35


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
programme (52)
    on left: 1, on right: 0
instruction (53)
    on left: 2 3 4 5, on right: 6 7
instructions (54)
    on left: 6 7, on right: 1 7 36 37 38 39
expression (55)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20, on right: 12 13
    14 15 16 17 18 19 20 34 35 36 37 38
type (56)
    on left: 21 22, on right: 23 25 28
declaration (57)
    on left: 23 24, on right: 30
declaration_tableau (58)
    on left: 25, on right: 24
liste_idf (59)
    on left: 26 27, on right: 23 24 27
const_declaration (60)
    on left: 28, on right: 31
declarations (61)
    on left: 29 30 31, on right: 1 30 31
inOut (62)
    on left: 32 33, on right: 3
affectation (63)
    on left: 34 35, on right: 2
condition (64)
    on left: 36 37, on right: 4
boucle (65)
    on left: 38 39, on right: 5


state 0

    0 $accept: . programme $end

    MainPrgm  shift, and go to state 1

    programme  go to state 2


state 1

    1 programme: MainPrgm . IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    IDF  shift, and go to state 3


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 4


state 3

    1 programme: MainPrgm IDF . pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    pvg  shift, and go to state 5


state 4

    0 $accept: programme $end .

    $default  accept


state 5

    1 programme: MainPrgm IDF pvg . Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    Var  shift, and go to state 6


state 6

    1 programme: MainPrgm IDF pvg Var . declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    let      shift, and go to state 7
    at_sign  shift, and go to state 8

    $default  reduce using rule 29 (declarations)

    declaration        go to state 9
    const_declaration  go to state 10
    declarations       go to state 11


state 7

   23 declaration: let . liste_idf separ_dec type pvg
   24            | let . liste_idf separ_dec declaration_tableau

    IDF  shift, and go to state 12

    liste_idf  go to state 13


state 8

   28 const_declaration: at_sign . define Const IDF separ_dec type affect_val constante pvg

    define  shift, and go to state 14


state 9

   30 declarations: declaration . declarations

    let      shift, and go to state 7
    at_sign  shift, and go to state 8

    $default  reduce using rule 29 (declarations)

    declaration        go to state 9
    const_declaration  go to state 10
    declarations       go to state 15


state 10

   31 declarations: const_declaration . declarations

    let      shift, and go to state 7
    at_sign  shift, and go to state 8

    $default  reduce using rule 29 (declarations)

    declaration        go to state 9
    const_declaration  go to state 10
    declarations       go to state 16


state 11

    1 programme: MainPrgm IDF pvg Var declarations . BeginPg acc_ouv instructions acc_fer EndPg pvg

    BeginPg  shift, and go to state 17


state 12

   26 liste_idf: IDF .

    $default  reduce using rule 26 (liste_idf)


state 13

   23 declaration: let liste_idf . separ_dec type pvg
   24            | let liste_idf . separ_dec declaration_tableau
   27 liste_idf: liste_idf . vg IDF

    vg         shift, and go to state 18
    separ_dec  shift, and go to state 19


state 14

   28 const_declaration: at_sign define . Const IDF separ_dec type affect_val constante pvg

    Const  shift, and go to state 20


state 15

   30 declarations: declaration declarations .

    $default  reduce using rule 30 (declarations)


state 16

   31 declarations: const_declaration declarations .

    $default  reduce using rule 31 (declarations)


state 17

    1 programme: MainPrgm IDF pvg Var declarations BeginPg . acc_ouv instructions acc_fer EndPg pvg

    acc_ouv  shift, and go to state 21


state 18

   27 liste_idf: liste_idf vg . IDF

    IDF  shift, and go to state 22


state 19

   23 declaration: let liste_idf separ_dec . type pvg
   24            | let liste_idf separ_dec . declaration_tableau

    Int          shift, and go to state 23
    reel         shift, and go to state 24
    crochet_ouv  shift, and go to state 25

    type                 go to state 26
    declaration_tableau  go to state 27


state 20

   28 const_declaration: at_sign define Const . IDF separ_dec type affect_val constante pvg

    IDF  shift, and go to state 28


state 21

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv . instructions acc_fer EndPg pvg

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 36
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 22

   27 liste_idf: liste_idf vg IDF .

    $default  reduce using rule 27 (liste_idf)


state 23

   21 type: Int .

    $default  reduce using rule 21 (type)


state 24

   22 type: reel .

    $default  reduce using rule 22 (type)


state 25

   25 declaration_tableau: crochet_ouv . type pvg constante crochet_fer pvg

    Int   shift, and go to state 23
    reel  shift, and go to state 24

    type  go to state 41


state 26

   23 declaration: let liste_idf separ_dec type . pvg

    pvg  shift, and go to state 42


state 27

   24 declaration: let liste_idf separ_dec declaration_tableau .

    $default  reduce using rule 24 (declaration)


state 28

   28 const_declaration: at_sign define Const IDF . separ_dec type affect_val constante pvg

    separ_dec  shift, and go to state 43


state 29

   32 inOut: input_var . par_ouv IDF par_fer pvg

    par_ouv  shift, and go to state 44


state 30

   33 inOut: output_var . par_ouv chaine par_fer pvg

    par_ouv  shift, and go to state 45


state 31

   34 affectation: IDF . aff expression pvg
   35            | IDF . crochet_ouv expression crochet_fer aff expression pvg

    aff          shift, and go to state 46
    crochet_ouv  shift, and go to state 47


state 32

   36 condition: IF . par_ouv expression par_fer THEN acc_ouv instructions acc_fer
   37          | IF . par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    par_ouv  shift, and go to state 48


state 33

   38 boucle: DO . acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg

    acc_ouv  shift, and go to state 49


state 34

   39 boucle: FOR . IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer

    IDF  shift, and go to state 50


state 35

    6 instructions: instruction .

    $default  reduce using rule 6 (instructions)


state 36

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions . acc_fer EndPg pvg
    7 instructions: instructions . instruction

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 51

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 37

    3 instruction: inOut .

    $default  reduce using rule 3 (instruction)


state 38

    2 instruction: affectation .

    $default  reduce using rule 2 (instruction)


state 39

    4 instruction: condition .

    $default  reduce using rule 4 (instruction)


state 40

    5 instruction: boucle .

    $default  reduce using rule 5 (instruction)


state 41

   25 declaration_tableau: crochet_ouv type . pvg constante crochet_fer pvg

    pvg  shift, and go to state 53


state 42

   23 declaration: let liste_idf separ_dec type pvg .

    $default  reduce using rule 23 (declaration)


state 43

   28 const_declaration: at_sign define Const IDF separ_dec . type affect_val constante pvg

    Int   shift, and go to state 23
    reel  shift, and go to state 24

    type  go to state 54


state 44

   32 inOut: input_var par_ouv . IDF par_fer pvg

    IDF  shift, and go to state 55


state 45

   33 inOut: output_var par_ouv . chaine par_fer pvg

    chaine  shift, and go to state 56


state 46

   34 affectation: IDF aff . expression pvg

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 63


state 47

   35 affectation: IDF crochet_ouv . expression crochet_fer aff expression pvg

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 64


state 48

   36 condition: IF par_ouv . expression par_fer THEN acc_ouv instructions acc_fer
   37          | IF par_ouv . expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 65


state 49

   38 boucle: DO acc_ouv . instructions acc_fer WHILE par_ouv expression par_fer pvg

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 66
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 50

   39 boucle: FOR IDF . FROM constante TO constante STEP constante acc_ouv instructions acc_fer

    FROM  shift, and go to state 67


state 51

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer . EndPg pvg

    EndPg  shift, and go to state 68


state 52

    7 instructions: instructions instruction .

    $default  reduce using rule 7 (instructions)


state 53

   25 declaration_tableau: crochet_ouv type pvg . constante crochet_fer pvg

    constante  shift, and go to state 69


state 54

   28 const_declaration: at_sign define Const IDF separ_dec type . affect_val constante pvg

    affect_val  shift, and go to state 70


state 55

   32 inOut: input_var par_ouv IDF . par_fer pvg

    par_fer  shift, and go to state 71


state 56

   33 inOut: output_var par_ouv chaine . par_fer pvg

    par_fer  shift, and go to state 72


state 57

    8 expression: IDF .
   12           | IDF . crochet_ouv expression crochet_fer

    crochet_ouv  shift, and go to state 73

    $default  reduce using rule 8 (expression)


state 58

   11 expression: chaine .

    $default  reduce using rule 11 (expression)


state 59

    9 expression: constante .

    $default  reduce using rule 9 (expression)


state 60

   10 expression: reel .

    $default  reduce using rule 10 (expression)


state 61

   15 expression: NOT . par_ouv expression par_fer

    par_ouv  shift, and go to state 74


state 62

   13 expression: par_ouv . expression AND expression par_fer
   14           | par_ouv . expression OR expression par_fer
   20           | par_ouv . expression par_fer

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 75


state 63

   16 expression: expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression
   34 affectation: IDF aff expression . pvg

    pvg       shift, and go to state 76
    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80


state 64

   16 expression: expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression
   35 affectation: IDF crochet_ouv expression . crochet_fer aff expression pvg

    add          shift, and go to state 77
    sous         shift, and go to state 78
    mult         shift, and go to state 79
    division     shift, and go to state 80
    crochet_fer  shift, and go to state 81


state 65

   16 expression: expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression
   36 condition: IF par_ouv expression . par_fer THEN acc_ouv instructions acc_fer
   37          | IF par_ouv expression . par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    par_fer   shift, and go to state 82


state 66

    7 instructions: instructions . instruction
   38 boucle: DO acc_ouv instructions . acc_fer WHILE par_ouv expression par_fer pvg

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 83

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 67

   39 boucle: FOR IDF FROM . constante TO constante STEP constante acc_ouv instructions acc_fer

    constante  shift, and go to state 84


state 68

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg . pvg

    pvg  shift, and go to state 85


state 69

   25 declaration_tableau: crochet_ouv type pvg constante . crochet_fer pvg

    crochet_fer  shift, and go to state 86


state 70

   28 const_declaration: at_sign define Const IDF separ_dec type affect_val . constante pvg

    constante  shift, and go to state 87


state 71

   32 inOut: input_var par_ouv IDF par_fer . pvg

    pvg  shift, and go to state 88


state 72

   33 inOut: output_var par_ouv chaine par_fer . pvg

    pvg  shift, and go to state 89


state 73

   12 expression: IDF crochet_ouv . expression crochet_fer

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 90


state 74

   15 expression: NOT par_ouv . expression par_fer

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 91


state 75

   13 expression: par_ouv expression . AND expression par_fer
   14           | par_ouv expression . OR expression par_fer
   16           | expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression
   20           | par_ouv expression . par_fer

    OR        shift, and go to state 92
    AND       shift, and go to state 93
    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    par_fer   shift, and go to state 94


state 76

   34 affectation: IDF aff expression pvg .

    $default  reduce using rule 34 (affectation)


state 77

   16 expression: expression add . expression

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 95


state 78

   17 expression: expression sous . expression

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 96


state 79

   18 expression: expression mult . expression

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 97


state 80

   19 expression: expression division . expression

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 98


state 81

   35 affectation: IDF crochet_ouv expression crochet_fer . aff expression pvg

    aff  shift, and go to state 99


state 82

   36 condition: IF par_ouv expression par_fer . THEN acc_ouv instructions acc_fer
   37          | IF par_ouv expression par_fer . THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    THEN  shift, and go to state 100


state 83

   38 boucle: DO acc_ouv instructions acc_fer . WHILE par_ouv expression par_fer pvg

    WHILE  shift, and go to state 101


state 84

   39 boucle: FOR IDF FROM constante . TO constante STEP constante acc_ouv instructions acc_fer

    TO  shift, and go to state 102


state 85

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg .

    $default  reduce using rule 1 (programme)


state 86

   25 declaration_tableau: crochet_ouv type pvg constante crochet_fer . pvg

    pvg  shift, and go to state 103


state 87

   28 const_declaration: at_sign define Const IDF separ_dec type affect_val constante . pvg

    pvg  shift, and go to state 104


state 88

   32 inOut: input_var par_ouv IDF par_fer pvg .

    $default  reduce using rule 32 (inOut)


state 89

   33 inOut: output_var par_ouv chaine par_fer pvg .

    $default  reduce using rule 33 (inOut)


state 90

   12 expression: IDF crochet_ouv expression . crochet_fer
   16           | expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression

    add          shift, and go to state 77
    sous         shift, and go to state 78
    mult         shift, and go to state 79
    division     shift, and go to state 80
    crochet_fer  shift, and go to state 105


state 91

   15 expression: NOT par_ouv expression . par_fer
   16           | expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    par_fer   shift, and go to state 106


state 92

   14 expression: par_ouv expression OR . expression par_fer

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 107


state 93

   13 expression: par_ouv expression AND . expression par_fer

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 108


state 94

   20 expression: par_ouv expression par_fer .

    $default  reduce using rule 20 (expression)


state 95

   16 expression: expression . add expression
   16           | expression add expression .
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression

    mult      shift, and go to state 79
    division  shift, and go to state 80

    $default  reduce using rule 16 (expression)


state 96

   16 expression: expression . add expression
   17           | expression . sous expression
   17           | expression sous expression .
   18           | expression . mult expression
   19           | expression . division expression

    mult      shift, and go to state 79
    division  shift, and go to state 80

    $default  reduce using rule 17 (expression)


state 97

   16 expression: expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   18           | expression mult expression .
   19           | expression . division expression

    $default  reduce using rule 18 (expression)


state 98

   16 expression: expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression
   19           | expression division expression .

    $default  reduce using rule 19 (expression)


state 99

   35 affectation: IDF crochet_ouv expression crochet_fer aff . expression pvg

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 109


state 100

   36 condition: IF par_ouv expression par_fer THEN . acc_ouv instructions acc_fer
   37          | IF par_ouv expression par_fer THEN . acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 110


state 101

   38 boucle: DO acc_ouv instructions acc_fer WHILE . par_ouv expression par_fer pvg

    par_ouv  shift, and go to state 111


state 102

   39 boucle: FOR IDF FROM constante TO . constante STEP constante acc_ouv instructions acc_fer

    constante  shift, and go to state 112


state 103

   25 declaration_tableau: crochet_ouv type pvg constante crochet_fer pvg .

    $default  reduce using rule 25 (declaration_tableau)


state 104

   28 const_declaration: at_sign define Const IDF separ_dec type affect_val constante pvg .

    $default  reduce using rule 28 (const_declaration)


state 105

   12 expression: IDF crochet_ouv expression crochet_fer .

    $default  reduce using rule 12 (expression)


state 106

   15 expression: NOT par_ouv expression par_fer .

    $default  reduce using rule 15 (expression)


state 107

   14 expression: par_ouv expression OR expression . par_fer
   16           | expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    par_fer   shift, and go to state 113


state 108

   13 expression: par_ouv expression AND expression . par_fer
   16           | expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    par_fer   shift, and go to state 114


state 109

   16 expression: expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression
   35 affectation: IDF crochet_ouv expression crochet_fer aff expression . pvg

    pvg       shift, and go to state 115
    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80


state 110

   36 condition: IF par_ouv expression par_fer THEN acc_ouv . instructions acc_fer
   37          | IF par_ouv expression par_fer THEN acc_ouv . instructions acc_fer ELSE acc_ouv instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 116
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 111

   38 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv . expression par_fer pvg

    IDF        shift, and go to state 57
    chaine     shift, and go to state 58
    constante  shift, and go to state 59
    reel       shift, and go to state 60
    NOT        shift, and go to state 61
    par_ouv    shift, and go to state 62

    expression  go to state 117


state 112

   39 boucle: FOR IDF FROM constante TO constante . STEP constante acc_ouv instructions acc_fer

    STEP  shift, and go to state 118


state 113

   14 expression: par_ouv expression OR expression par_fer .

    $default  reduce using rule 14 (expression)


state 114

   13 expression: par_ouv expression AND expression par_fer .

    $default  reduce using rule 13 (expression)


state 115

   35 affectation: IDF crochet_ouv expression crochet_fer aff expression pvg .

    $default  reduce using rule 35 (affectation)


state 116

    7 instructions: instructions . instruction
   36 condition: IF par_ouv expression par_fer THEN acc_ouv instructions . acc_fer
   37          | IF par_ouv expression par_fer THEN acc_ouv instructions . acc_fer ELSE acc_ouv instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 119

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 117

   16 expression: expression . add expression
   17           | expression . sous expression
   18           | expression . mult expression
   19           | expression . division expression
   38 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression . par_fer pvg

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    par_fer   shift, and go to state 120


state 118

   39 boucle: FOR IDF FROM constante TO constante STEP . constante acc_ouv instructions acc_fer

    constante  shift, and go to state 121


state 119

   36 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer .
   37          | IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer . ELSE acc_ouv instructions acc_fer

    ELSE  shift, and go to state 122

    $default  reduce using rule 36 (condition)


state 120

   38 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer . pvg

    pvg  shift, and go to state 123


state 121

   39 boucle: FOR IDF FROM constante TO constante STEP constante . acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 124


state 122

   37 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE . acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 125


state 123

   38 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg .

    $default  reduce using rule 38 (boucle)


state 124

   39 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv . instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 126
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 125

   37 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv . instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 127
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 126

    7 instructions: instructions . instruction
   39 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv instructions . acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 128

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 127

    7 instructions: instructions . instruction
   37 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions . acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 129

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 128

   39 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer .

    $default  reduce using rule 39 (boucle)


state 129

   37 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer .

    $default  reduce using rule 37 (condition)
