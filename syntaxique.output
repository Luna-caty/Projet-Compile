State 6 conflicts: 2 shift/reduce
State 57 conflicts: 1 shift/reduce
State 109 conflicts: 10 shift/reduce


Grammar

    0 $accept: programme $end

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    2 instruction: affectation
    3            | inOut
    4            | condition
    5            | boucle

    6 op_cmp: inf_egal
    7       | sup_egal
    8       | inf
    9       | sup
   10       | egal
   11       | not_egal

   12 instructions: instruction
   13             | instructions instruction

   14 expression: IDF
   15           | constante
   16           | reel
   17           | chaine
   18           | IDF crochet_ouv expression crochet_fer
   19           | expression op_cmp expression
   20           | par_ouv expression AND expression par_fer
   21           | par_ouv expression OR expression par_fer
   22           | NOT par_ouv expression par_fer
   23           | expression add expression
   24           | expression sous expression
   25           | expression mult expression
   26           | expression division expression
   27           | par_ouv expression par_fer

   28 type: Int
   29     | reel

   30 declaration: let liste_idf separ_dec type pvg
   31            | let liste_idf separ_dec declaration_tableau

   32 declaration_tableau: crochet_ouv type pvg constante crochet_fer pvg

   33 liste_idf: IDF
   34          | liste_idf vg IDF

   35 const_declaration: at_sign define Const IDF separ_dec type affect_val constante pvg

   36 declarations: declaration
   37             | const_declaration
   38             | declarations declaration
   39             | declarations const_declaration
   40             | /* empty */

   41 inOut: input_var par_ouv IDF par_fer pvg
   42      | output_var par_ouv expression par_fer pvg
   43      | output_var par_ouv chaine par_fer pvg

   44 affectation: IDF aff expression pvg
   45            | IDF crochet_ouv expression crochet_fer aff expression pvg

   46 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer
   47          | IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

   48 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg
   49       | FOR IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer


Terminals, with rules where they appear

$end (0) 0
error (256)
MainPrgm (258) 1
Var (259) 1
BeginPg (260) 1
EndPg (261) 1
input_var (262) 41
output_var (263) 42 43
Const (264) 35
IDF (265) 1 14 18 33 34 35 41 44 45 49
let (266) 30 31
define (267) 35
at_sign (268) 35
chaine (269) 17 43
Int (270) 28
constante (271) 15 32 35 49
reel (272) 16 29
IF (273) 46 47
THEN (274) 46 47
ELSE (275) 47
DO (276) 48
WHILE (277) 48
FOR (278) 49
FROM (279) 49
TO (280) 49
STEP (281) 49
OR (282) 21
AND (283) 20
NOT (284) 22
aff (285) 44 45
affect_val (286) 35
pvg (287) 1 30 32 35 41 42 43 44 45 48
vg (288) 34
separ_dec (289) 30 31 35
add (290) 23
sous (291) 24
mult (292) 25
division (293) 26
inf_egal (294) 6
sup_egal (295) 7
inf (296) 8
sup (297) 9
egal (298) 10
not_egal (299) 11
acc_ouv (300) 1 46 47 48 49
acc_fer (301) 1 46 47 48 49
par_ouv (302) 20 21 22 27 41 42 43 46 47 48
par_fer (303) 20 21 22 27 41 42 43 46 47 48
crochet_ouv (304) 18 32 45
crochet_fer (305) 18 32 45


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
programme (52)
    on left: 1, on right: 0
instruction (53)
    on left: 2 3 4 5, on right: 12 13
op_cmp (54)
    on left: 6 7 8 9 10 11, on right: 19
instructions (55)
    on left: 12 13, on right: 1 13 46 47 48 49
expression (56)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right: 18
    19 20 21 22 23 24 25 26 27 42 44 45 46 47 48
type (57)
    on left: 28 29, on right: 30 32 35
declaration (58)
    on left: 30 31, on right: 36 38
declaration_tableau (59)
    on left: 32, on right: 31
liste_idf (60)
    on left: 33 34, on right: 30 31 34
const_declaration (61)
    on left: 35, on right: 37 39
declarations (62)
    on left: 36 37 38 39 40, on right: 1 38 39
inOut (63)
    on left: 41 42 43, on right: 3
affectation (64)
    on left: 44 45, on right: 2
condition (65)
    on left: 46 47, on right: 4
boucle (66)
    on left: 48 49, on right: 5


state 0

    0 $accept: . programme $end

    MainPrgm  shift, and go to state 1

    programme  go to state 2


state 1

    1 programme: MainPrgm . IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    IDF  shift, and go to state 3


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 4


state 3

    1 programme: MainPrgm IDF . pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    pvg  shift, and go to state 5


state 4

    0 $accept: programme $end .

    $default  accept


state 5

    1 programme: MainPrgm IDF pvg . Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    Var  shift, and go to state 6


state 6

    1 programme: MainPrgm IDF pvg Var . declarations BeginPg acc_ouv instructions acc_fer EndPg pvg

    let      shift, and go to state 7
    at_sign  shift, and go to state 8

    let       [reduce using rule 40 (declarations)]
    at_sign   [reduce using rule 40 (declarations)]
    $default  reduce using rule 40 (declarations)

    declaration        go to state 9
    const_declaration  go to state 10
    declarations       go to state 11


state 7

   30 declaration: let . liste_idf separ_dec type pvg
   31            | let . liste_idf separ_dec declaration_tableau

    IDF  shift, and go to state 12

    liste_idf  go to state 13


state 8

   35 const_declaration: at_sign . define Const IDF separ_dec type affect_val constante pvg

    define  shift, and go to state 14


state 9

   36 declarations: declaration .

    $default  reduce using rule 36 (declarations)


state 10

   37 declarations: const_declaration .

    $default  reduce using rule 37 (declarations)


state 11

    1 programme: MainPrgm IDF pvg Var declarations . BeginPg acc_ouv instructions acc_fer EndPg pvg
   38 declarations: declarations . declaration
   39             | declarations . const_declaration

    BeginPg  shift, and go to state 15
    let      shift, and go to state 7
    at_sign  shift, and go to state 8

    declaration        go to state 16
    const_declaration  go to state 17


state 12

   33 liste_idf: IDF .

    $default  reduce using rule 33 (liste_idf)


state 13

   30 declaration: let liste_idf . separ_dec type pvg
   31            | let liste_idf . separ_dec declaration_tableau
   34 liste_idf: liste_idf . vg IDF

    vg         shift, and go to state 18
    separ_dec  shift, and go to state 19


state 14

   35 const_declaration: at_sign define . Const IDF separ_dec type affect_val constante pvg

    Const  shift, and go to state 20


state 15

    1 programme: MainPrgm IDF pvg Var declarations BeginPg . acc_ouv instructions acc_fer EndPg pvg

    acc_ouv  shift, and go to state 21


state 16

   38 declarations: declarations declaration .

    $default  reduce using rule 38 (declarations)


state 17

   39 declarations: declarations const_declaration .

    $default  reduce using rule 39 (declarations)


state 18

   34 liste_idf: liste_idf vg . IDF

    IDF  shift, and go to state 22


state 19

   30 declaration: let liste_idf separ_dec . type pvg
   31            | let liste_idf separ_dec . declaration_tableau

    Int          shift, and go to state 23
    reel         shift, and go to state 24
    crochet_ouv  shift, and go to state 25

    type                 go to state 26
    declaration_tableau  go to state 27


state 20

   35 const_declaration: at_sign define Const . IDF separ_dec type affect_val constante pvg

    IDF  shift, and go to state 28


state 21

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv . instructions acc_fer EndPg pvg

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 36
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 22

   34 liste_idf: liste_idf vg IDF .

    $default  reduce using rule 34 (liste_idf)


state 23

   28 type: Int .

    $default  reduce using rule 28 (type)


state 24

   29 type: reel .

    $default  reduce using rule 29 (type)


state 25

   32 declaration_tableau: crochet_ouv . type pvg constante crochet_fer pvg

    Int   shift, and go to state 23
    reel  shift, and go to state 24

    type  go to state 41


state 26

   30 declaration: let liste_idf separ_dec type . pvg

    pvg  shift, and go to state 42


state 27

   31 declaration: let liste_idf separ_dec declaration_tableau .

    $default  reduce using rule 31 (declaration)


state 28

   35 const_declaration: at_sign define Const IDF . separ_dec type affect_val constante pvg

    separ_dec  shift, and go to state 43


state 29

   41 inOut: input_var . par_ouv IDF par_fer pvg

    par_ouv  shift, and go to state 44


state 30

   42 inOut: output_var . par_ouv expression par_fer pvg
   43      | output_var . par_ouv chaine par_fer pvg

    par_ouv  shift, and go to state 45


state 31

   44 affectation: IDF . aff expression pvg
   45            | IDF . crochet_ouv expression crochet_fer aff expression pvg

    aff          shift, and go to state 46
    crochet_ouv  shift, and go to state 47


state 32

   46 condition: IF . par_ouv expression par_fer THEN acc_ouv instructions acc_fer
   47          | IF . par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    par_ouv  shift, and go to state 48


state 33

   48 boucle: DO . acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg

    acc_ouv  shift, and go to state 49


state 34

   49 boucle: FOR . IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer

    IDF  shift, and go to state 50


state 35

   12 instructions: instruction .

    $default  reduce using rule 12 (instructions)


state 36

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions . acc_fer EndPg pvg
   13 instructions: instructions . instruction

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 51

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 37

    3 instruction: inOut .

    $default  reduce using rule 3 (instruction)


state 38

    2 instruction: affectation .

    $default  reduce using rule 2 (instruction)


state 39

    4 instruction: condition .

    $default  reduce using rule 4 (instruction)


state 40

    5 instruction: boucle .

    $default  reduce using rule 5 (instruction)


state 41

   32 declaration_tableau: crochet_ouv type . pvg constante crochet_fer pvg

    pvg  shift, and go to state 53


state 42

   30 declaration: let liste_idf separ_dec type pvg .

    $default  reduce using rule 30 (declaration)


state 43

   35 const_declaration: at_sign define Const IDF separ_dec . type affect_val constante pvg

    Int   shift, and go to state 23
    reel  shift, and go to state 24

    type  go to state 54


state 44

   41 inOut: input_var par_ouv . IDF par_fer pvg

    IDF  shift, and go to state 55


state 45

   42 inOut: output_var par_ouv . expression par_fer pvg
   43      | output_var par_ouv . chaine par_fer pvg

    IDF        shift, and go to state 56
    chaine     shift, and go to state 57
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 62


state 46

   44 affectation: IDF aff . expression pvg

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 64


state 47

   45 affectation: IDF crochet_ouv . expression crochet_fer aff expression pvg

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 65


state 48

   46 condition: IF par_ouv . expression par_fer THEN acc_ouv instructions acc_fer
   47          | IF par_ouv . expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 66


state 49

   48 boucle: DO acc_ouv . instructions acc_fer WHILE par_ouv expression par_fer pvg

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 67
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 50

   49 boucle: FOR IDF . FROM constante TO constante STEP constante acc_ouv instructions acc_fer

    FROM  shift, and go to state 68


state 51

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer . EndPg pvg

    EndPg  shift, and go to state 69


state 52

   13 instructions: instructions instruction .

    $default  reduce using rule 13 (instructions)


state 53

   32 declaration_tableau: crochet_ouv type pvg . constante crochet_fer pvg

    constante  shift, and go to state 70


state 54

   35 const_declaration: at_sign define Const IDF separ_dec type . affect_val constante pvg

    affect_val  shift, and go to state 71


state 55

   41 inOut: input_var par_ouv IDF . par_fer pvg

    par_fer  shift, and go to state 72


state 56

   14 expression: IDF .
   18           | IDF . crochet_ouv expression crochet_fer

    crochet_ouv  shift, and go to state 73

    $default  reduce using rule 14 (expression)


state 57

   17 expression: chaine .
   43 inOut: output_var par_ouv chaine . par_fer pvg

    par_fer  shift, and go to state 74

    par_fer   [reduce using rule 17 (expression)]
    $default  reduce using rule 17 (expression)


state 58

   15 expression: constante .

    $default  reduce using rule 15 (expression)


state 59

   16 expression: reel .

    $default  reduce using rule 16 (expression)


state 60

   22 expression: NOT . par_ouv expression par_fer

    par_ouv  shift, and go to state 75


state 61

   20 expression: par_ouv . expression AND expression par_fer
   21           | par_ouv . expression OR expression par_fer
   27           | par_ouv . expression par_fer

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 76


state 62

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   42 inOut: output_var par_ouv expression . par_fer pvg

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86
    par_fer   shift, and go to state 87

    op_cmp  go to state 88


state 63

   17 expression: chaine .

    $default  reduce using rule 17 (expression)


state 64

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   44 affectation: IDF aff expression . pvg

    pvg       shift, and go to state 89
    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86

    op_cmp  go to state 88


state 65

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   45 affectation: IDF crochet_ouv expression . crochet_fer aff expression pvg

    add          shift, and go to state 77
    sous         shift, and go to state 78
    mult         shift, and go to state 79
    division     shift, and go to state 80
    inf_egal     shift, and go to state 81
    sup_egal     shift, and go to state 82
    inf          shift, and go to state 83
    sup          shift, and go to state 84
    egal         shift, and go to state 85
    not_egal     shift, and go to state 86
    crochet_fer  shift, and go to state 90

    op_cmp  go to state 88


state 66

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   46 condition: IF par_ouv expression . par_fer THEN acc_ouv instructions acc_fer
   47          | IF par_ouv expression . par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86
    par_fer   shift, and go to state 91

    op_cmp  go to state 88


state 67

   13 instructions: instructions . instruction
   48 boucle: DO acc_ouv instructions . acc_fer WHILE par_ouv expression par_fer pvg

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 92

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 68

   49 boucle: FOR IDF FROM . constante TO constante STEP constante acc_ouv instructions acc_fer

    constante  shift, and go to state 93


state 69

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg . pvg

    pvg  shift, and go to state 94


state 70

   32 declaration_tableau: crochet_ouv type pvg constante . crochet_fer pvg

    crochet_fer  shift, and go to state 95


state 71

   35 const_declaration: at_sign define Const IDF separ_dec type affect_val . constante pvg

    constante  shift, and go to state 96


state 72

   41 inOut: input_var par_ouv IDF par_fer . pvg

    pvg  shift, and go to state 97


state 73

   18 expression: IDF crochet_ouv . expression crochet_fer

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 98


state 74

   43 inOut: output_var par_ouv chaine par_fer . pvg

    pvg  shift, and go to state 99


state 75

   22 expression: NOT par_ouv . expression par_fer

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 100


state 76

   19 expression: expression . op_cmp expression
   20           | par_ouv expression . AND expression par_fer
   21           | par_ouv expression . OR expression par_fer
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   27           | par_ouv expression . par_fer

    OR        shift, and go to state 101
    AND       shift, and go to state 102
    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86
    par_fer   shift, and go to state 103

    op_cmp  go to state 88


state 77

   23 expression: expression add . expression

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 104


state 78

   24 expression: expression sous . expression

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 105


state 79

   25 expression: expression mult . expression

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 106


state 80

   26 expression: expression division . expression

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 107


state 81

    6 op_cmp: inf_egal .

    $default  reduce using rule 6 (op_cmp)


state 82

    7 op_cmp: sup_egal .

    $default  reduce using rule 7 (op_cmp)


state 83

    8 op_cmp: inf .

    $default  reduce using rule 8 (op_cmp)


state 84

    9 op_cmp: sup .

    $default  reduce using rule 9 (op_cmp)


state 85

   10 op_cmp: egal .

    $default  reduce using rule 10 (op_cmp)


state 86

   11 op_cmp: not_egal .

    $default  reduce using rule 11 (op_cmp)


state 87

   42 inOut: output_var par_ouv expression par_fer . pvg

    pvg  shift, and go to state 108


state 88

   19 expression: expression op_cmp . expression

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 109


state 89

   44 affectation: IDF aff expression pvg .

    $default  reduce using rule 44 (affectation)


state 90

   45 affectation: IDF crochet_ouv expression crochet_fer . aff expression pvg

    aff  shift, and go to state 110


state 91

   46 condition: IF par_ouv expression par_fer . THEN acc_ouv instructions acc_fer
   47          | IF par_ouv expression par_fer . THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    THEN  shift, and go to state 111


state 92

   48 boucle: DO acc_ouv instructions acc_fer . WHILE par_ouv expression par_fer pvg

    WHILE  shift, and go to state 112


state 93

   49 boucle: FOR IDF FROM constante . TO constante STEP constante acc_ouv instructions acc_fer

    TO  shift, and go to state 113


state 94

    1 programme: MainPrgm IDF pvg Var declarations BeginPg acc_ouv instructions acc_fer EndPg pvg .

    $default  reduce using rule 1 (programme)


state 95

   32 declaration_tableau: crochet_ouv type pvg constante crochet_fer . pvg

    pvg  shift, and go to state 114


state 96

   35 const_declaration: at_sign define Const IDF separ_dec type affect_val constante . pvg

    pvg  shift, and go to state 115


state 97

   41 inOut: input_var par_ouv IDF par_fer pvg .

    $default  reduce using rule 41 (inOut)


state 98

   18 expression: IDF crochet_ouv expression . crochet_fer
   19           | expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression

    add          shift, and go to state 77
    sous         shift, and go to state 78
    mult         shift, and go to state 79
    division     shift, and go to state 80
    inf_egal     shift, and go to state 81
    sup_egal     shift, and go to state 82
    inf          shift, and go to state 83
    sup          shift, and go to state 84
    egal         shift, and go to state 85
    not_egal     shift, and go to state 86
    crochet_fer  shift, and go to state 116

    op_cmp  go to state 88


state 99

   43 inOut: output_var par_ouv chaine par_fer pvg .

    $default  reduce using rule 43 (inOut)


state 100

   19 expression: expression . op_cmp expression
   22           | NOT par_ouv expression . par_fer
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86
    par_fer   shift, and go to state 117

    op_cmp  go to state 88


state 101

   21 expression: par_ouv expression OR . expression par_fer

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 118


state 102

   20 expression: par_ouv expression AND . expression par_fer

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 119


state 103

   27 expression: par_ouv expression par_fer .

    $default  reduce using rule 27 (expression)


state 104

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   23           | expression add expression .
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression

    mult      shift, and go to state 79
    division  shift, and go to state 80

    $default  reduce using rule 23 (expression)

    op_cmp  go to state 88


state 105

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   24           | expression sous expression .
   25           | expression . mult expression
   26           | expression . division expression

    mult      shift, and go to state 79
    division  shift, and go to state 80

    $default  reduce using rule 24 (expression)

    op_cmp  go to state 88


state 106

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   25           | expression mult expression .
   26           | expression . division expression

    $default  reduce using rule 25 (expression)

    op_cmp  go to state 88


state 107

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   26           | expression division expression .

    $default  reduce using rule 26 (expression)

    op_cmp  go to state 88


state 108

   42 inOut: output_var par_ouv expression par_fer pvg .

    $default  reduce using rule 42 (inOut)


state 109

   19 expression: expression . op_cmp expression
   19           | expression op_cmp expression .
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86

    add       [reduce using rule 19 (expression)]
    sous      [reduce using rule 19 (expression)]
    mult      [reduce using rule 19 (expression)]
    division  [reduce using rule 19 (expression)]
    inf_egal  [reduce using rule 19 (expression)]
    sup_egal  [reduce using rule 19 (expression)]
    inf       [reduce using rule 19 (expression)]
    sup       [reduce using rule 19 (expression)]
    egal      [reduce using rule 19 (expression)]
    not_egal  [reduce using rule 19 (expression)]
    $default  reduce using rule 19 (expression)

    op_cmp  go to state 88


state 110

   45 affectation: IDF crochet_ouv expression crochet_fer aff . expression pvg

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 120


state 111

   46 condition: IF par_ouv expression par_fer THEN . acc_ouv instructions acc_fer
   47          | IF par_ouv expression par_fer THEN . acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 121


state 112

   48 boucle: DO acc_ouv instructions acc_fer WHILE . par_ouv expression par_fer pvg

    par_ouv  shift, and go to state 122


state 113

   49 boucle: FOR IDF FROM constante TO . constante STEP constante acc_ouv instructions acc_fer

    constante  shift, and go to state 123


state 114

   32 declaration_tableau: crochet_ouv type pvg constante crochet_fer pvg .

    $default  reduce using rule 32 (declaration_tableau)


state 115

   35 const_declaration: at_sign define Const IDF separ_dec type affect_val constante pvg .

    $default  reduce using rule 35 (const_declaration)


state 116

   18 expression: IDF crochet_ouv expression crochet_fer .

    $default  reduce using rule 18 (expression)


state 117

   22 expression: NOT par_ouv expression par_fer .

    $default  reduce using rule 22 (expression)


state 118

   19 expression: expression . op_cmp expression
   21           | par_ouv expression OR expression . par_fer
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86
    par_fer   shift, and go to state 124

    op_cmp  go to state 88


state 119

   19 expression: expression . op_cmp expression
   20           | par_ouv expression AND expression . par_fer
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86
    par_fer   shift, and go to state 125

    op_cmp  go to state 88


state 120

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   45 affectation: IDF crochet_ouv expression crochet_fer aff expression . pvg

    pvg       shift, and go to state 126
    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86

    op_cmp  go to state 88


state 121

   46 condition: IF par_ouv expression par_fer THEN acc_ouv . instructions acc_fer
   47          | IF par_ouv expression par_fer THEN acc_ouv . instructions acc_fer ELSE acc_ouv instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 127
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 122

   48 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv . expression par_fer pvg

    IDF        shift, and go to state 56
    chaine     shift, and go to state 63
    constante  shift, and go to state 58
    reel       shift, and go to state 59
    NOT        shift, and go to state 60
    par_ouv    shift, and go to state 61

    expression  go to state 128


state 123

   49 boucle: FOR IDF FROM constante TO constante . STEP constante acc_ouv instructions acc_fer

    STEP  shift, and go to state 129


state 124

   21 expression: par_ouv expression OR expression par_fer .

    $default  reduce using rule 21 (expression)


state 125

   20 expression: par_ouv expression AND expression par_fer .

    $default  reduce using rule 20 (expression)


state 126

   45 affectation: IDF crochet_ouv expression crochet_fer aff expression pvg .

    $default  reduce using rule 45 (affectation)


state 127

   13 instructions: instructions . instruction
   46 condition: IF par_ouv expression par_fer THEN acc_ouv instructions . acc_fer
   47          | IF par_ouv expression par_fer THEN acc_ouv instructions . acc_fer ELSE acc_ouv instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 130

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 128

   19 expression: expression . op_cmp expression
   23           | expression . add expression
   24           | expression . sous expression
   25           | expression . mult expression
   26           | expression . division expression
   48 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression . par_fer pvg

    add       shift, and go to state 77
    sous      shift, and go to state 78
    mult      shift, and go to state 79
    division  shift, and go to state 80
    inf_egal  shift, and go to state 81
    sup_egal  shift, and go to state 82
    inf       shift, and go to state 83
    sup       shift, and go to state 84
    egal      shift, and go to state 85
    not_egal  shift, and go to state 86
    par_fer   shift, and go to state 131

    op_cmp  go to state 88


state 129

   49 boucle: FOR IDF FROM constante TO constante STEP . constante acc_ouv instructions acc_fer

    constante  shift, and go to state 132


state 130

   46 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer .
   47          | IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer . ELSE acc_ouv instructions acc_fer

    ELSE  shift, and go to state 133

    $default  reduce using rule 46 (condition)


state 131

   48 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer . pvg

    pvg  shift, and go to state 134


state 132

   49 boucle: FOR IDF FROM constante TO constante STEP constante . acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 135


state 133

   47 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE . acc_ouv instructions acc_fer

    acc_ouv  shift, and go to state 136


state 134

   48 boucle: DO acc_ouv instructions acc_fer WHILE par_ouv expression par_fer pvg .

    $default  reduce using rule 48 (boucle)


state 135

   49 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv . instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 137
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 136

   47 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv . instructions acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34

    instruction   go to state 35
    instructions  go to state 138
    inOut         go to state 37
    affectation   go to state 38
    condition     go to state 39
    boucle        go to state 40


state 137

   13 instructions: instructions . instruction
   49 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv instructions . acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 139

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 138

   13 instructions: instructions . instruction
   47 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions . acc_fer

    input_var   shift, and go to state 29
    output_var  shift, and go to state 30
    IDF         shift, and go to state 31
    IF          shift, and go to state 32
    DO          shift, and go to state 33
    FOR         shift, and go to state 34
    acc_fer     shift, and go to state 140

    instruction  go to state 52
    inOut        go to state 37
    affectation  go to state 38
    condition    go to state 39
    boucle       go to state 40


state 139

   49 boucle: FOR IDF FROM constante TO constante STEP constante acc_ouv instructions acc_fer .

    $default  reduce using rule 49 (boucle)


state 140

   47 condition: IF par_ouv expression par_fer THEN acc_ouv instructions acc_fer ELSE acc_ouv instructions acc_fer .

    $default  reduce using rule 47 (condition)
